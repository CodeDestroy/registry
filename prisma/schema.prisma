generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PITRs {
  id          Int           @id @default(autoincrement())
  PITRS_name  String        @db.VarChar(255)
  createdAt   DateTime      @db.DateTime(0)
  updatedAt   DateTime      @db.DateTime(0)
  registrG35s registrG35s[]
}

model accessRegistry {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  alias         String          @db.VarChar(100)
  component     String          @db.VarChar(100)
  user_accesses user_accesses[]
}

model cities {
  id          Int           @id @default(autoincrement())
  city_name   String        @db.VarChar(255)
  createdAt   DateTime      @db.DateTime(0)
  updatedAt   DateTime      @db.DateTime(0)
  registrG35s registrG35s[]
}

model coursePulm {
  id          Int           @id @default(autoincrement())
  course_name String        @db.VarChar(100)
  registrPulm registrPulm[]
}

model coursesG35 {
  id          Int           @id @default(autoincrement())
  course_name String        @db.VarChar(255)
  createdAt   DateTime      @db.DateTime(0)
  updatedAt   DateTime      @db.DateTime(0)
  registrG35s registrG35s[]
}

model polyclinics {
  id              Int           @id @default(autoincrement())
  polyclinic_name String        @db.VarChar(255)
  createdAt       DateTime      @db.DateTime(0)
  updatedAt       DateTime      @db.DateTime(0)
  registrG35s     registrG35s[]
}

model registrG35s {
  id             Int          @id @default(autoincrement())
  firstName      String?      @db.VarChar(255)
  secondName     String?      @db.VarChar(255)
  patronomicName String?      @db.VarChar(255)
  birthDate      DateTime?    @db.Date
  cityId         Int?
  addressFact    String?      @db.Text
  polyclinicId   Int?
  phone          String?      @db.VarChar(255)
  invalid        Int?
  courseId       Int?
  edss           Float?
  PITRId         Int?
  therapy        String?      @db.VarChar(255)
  diagnozDate    DateTime?    @db.Date
  mrt            String?      @db.Text
  vipiski        String?      @db.Text
  comments       String?      @db.Text
  createdAt      DateTime     @default(now()) @db.DateTime(0)
  updatedAt      DateTime     @default(now()) @db.DateTime(0)
  cities         cities?      @relation(fields: [cityId], references: [id], onDelete: Cascade, map: "registrG35s_ibfk_1")
  polyclinics    polyclinics? @relation(fields: [polyclinicId], references: [id], onDelete: Cascade, map: "registrG35s_ibfk_2")
  coursesG35     coursesG35?  @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "registrG35s_ibfk_3")
  PITRs          PITRs?       @relation(fields: [PITRId], references: [id], onDelete: Cascade, map: "registrG35s_ibfk_4")

  @@index([PITRId], map: "PITRId")
  @@index([cityId], map: "cityId")
  @@index([courseId], map: "courseId")
  @@index([polyclinicId], map: "polyclinicId")
}

model registrPulm {
  id                      Int         @id @default(autoincrement())
  secondName              String?     @db.VarChar(100)
  firstName               String?     @db.VarChar(100)
  patronomicName          String?     @db.VarChar(100)
  birthDate               DateTime?   @db.Date
  address                 String?     @db.Text
  phone                   String?     @db.VarChar(100)
  lastHospitalizationDate DateTime?   @db.Date
  height                  Float?
  weight                  Float?
  pneumoniaType           String?     @db.Text
  mMRS                    String?     @db.VarChar(100)
  FJELoriginal            String?     @db.VarChar(100)
  DLCOoriginal            String?     @db.VarChar(100)
  flowType                String?     @db.VarChar(255)
  course_id               Int?
  initTherapyDate         DateTime?   @db.Date
  controlVisitNumber      String?     @db.VarChar(100)
  controlVisitDate        DateTime?   @db.Date
  mMRScontrol             String?     @db.VarChar(100)
  FJELcontrol             String?     @db.VarChar(100)
  DLCOcontrol             String?     @db.VarChar(100)
  comments                String?     @db.Text
  coursePulm              coursePulm? @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registrPulm_FK")

  @@index([course_id], map: "registrPulm_FK")
}

model tokens {
  id        Int      @id @default(autoincrement())
  token     String?  @db.Text
  userId    Int?
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  users     users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tokens_ibfk_1")

  @@index([userId], map: "userId")
}

model user_accesses {
  id             Int            @id @default(autoincrement())
  user_id        Int
  access_id      Int
  accessRegistry accessRegistry @relation(fields: [access_id], references: [id], onUpdate: NoAction, map: "user_accesses_FK")
  users          users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_accesses_FK_1")

  @@index([access_id], map: "user_accesses_FK")
  @@index([user_id], map: "user_accesses_FK_1")
}

model users {
  id             Int             @id @default(autoincrement())
  firstName      String?         @db.VarChar(255)
  secondName     String?         @db.VarChar(255)
  patronomicName String?         @db.VarChar(255)
  role           String?         @db.VarChar(255)
  district       String?         @db.VarChar(255)
  login          String?         @db.VarChar(255)
  password       String?         @db.VarChar(255)
  createdAt      DateTime        @db.DateTime(0)
  updatedAt      DateTime        @db.DateTime(0)
  tokens         tokens[]
  user_accesses  user_accesses[]
}

model allerg_illness {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  registrBronchPulm registrBronchPulm[]
}

model ba_course_illness {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  registrBronchPulm registrBronchPulm[]
}

model bazis_therapy {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  registrBronchPulm registrBronchPulm[]
}

model cardio_patolog {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  registrBronchPulm registrBronchPulm[]
}

model choice_preparat_on_bit {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  registrBronchPulm registrBronchPulm[]
}

model registrBronchPulm {
  id                        Int                    @id @default(autoincrement())
  secondName                String                 @db.VarChar(100)
  firstName                 String                 @db.VarChar(100)
  patronomicName            String                 @db.VarChar(100)
  birthDate                 DateTime               @db.Date
  address                   String                 @db.Text
  phone                     String                 @db.VarChar(100)
  lastHospitalizationDate   DateTime               @db.Date
  height                    Float
  weight                    Float
  heaviness                 String                 @db.VarChar(100)
  controlDegree             String                 @db.VarChar(100)
  escalation                String                 @db.VarChar(100)
  breath_heaviness          Int
  th2                       String                 @db.VarChar(100)
  eozinophilia              String                 @db.VarChar(100)
  IgE                       String                 @db.VarChar(100)
  allergAnamnez             String                 @db.VarChar(100)
  allerg_illness_id         Int
  choice_preparat_on_bit_id Int
  dozaOnBIT                 String                 @db.VarChar(100)
  needReceivBIT             Boolean
  bazis_therapy_id          Int
  quanDozKDBA               Int
  ba_course_illness_id      Int
  controlAfterThreeMonths   String                 @db.Text
  SRB                       String                 @db.VarChar(100)
  gipercoagulation          Boolean
  cardio_patolog_id         Int
  failureCirculation        String                 @db.VarChar(100)
  sequence                  String                 @db.VarChar(100)
  dateInit                  DateTime               @db.Date
  dateControlEffect         DateTime               @db.Date
  allerg_illness            allerg_illness         @relation(fields: [allerg_illness_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registrBronchPulm_FK")
  choice_preparat_on_bit    choice_preparat_on_bit @relation(fields: [choice_preparat_on_bit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registrBronchPulm_FK_1")
  bazis_therapy             bazis_therapy          @relation(fields: [bazis_therapy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registrBronchPulm_FK_2")
  ba_course_illness         ba_course_illness      @relation(fields: [ba_course_illness_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registrBronchPulm_FK_3")
  cardio_patolog            cardio_patolog         @relation(fields: [cardio_patolog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "registrBronchPulm_FK_4")

  @@index([allerg_illness_id], map: "registrBronchPulm_FK")
  @@index([choice_preparat_on_bit_id], map: "registrBronchPulm_FK_1")
  @@index([bazis_therapy_id], map: "registrBronchPulm_FK_2")
  @@index([ba_course_illness_id], map: "registrBronchPulm_FK_3")
  @@index([cardio_patolog_id], map: "registrBronchPulm_FK_4")
}
